
grammar Hummingbird
  root           <- statements:statement_list <Root>

  block          <- "{" allspace statement_list "}" <Block>

  statement_list <- head:statement tail:(terminator statement)* allspace
  statement      <- assignment / control / expr / comment

  assignment <- lvalue space "=" space rvalue <Assignment>
  lvalue     <- let / var / path
  rvalue     <- expr
  path       <- name tail:(indexer / property)*

  expr       <- (literal !(_ binaryop) / binary / unary / func / chain / group) <Expression>
  lexpr      <- literal / unary / chain / group

  control    <- if / while / for / try / return
  if         <- "if" space condition:expr _ block <If>
  for        <- "for" space init:statement? _ ";" _ cond:statement? _ ";" _ after:statement? _ block <For>
  while      <- "while" _ expr _ block
  try        <- "try" _ block _ "catch" space name _ block
  return     <- "return" (space expr)? <Return>

  let        <- declarator:"let" space name typifier:(":" space type)?
  var        <- declarator:"var" space name typifier:(":" space type)?

  name       <- [A-Za-z] [A-Za-z0-9_]*
  type       <- [A-Z] [A-Za-z0-9_]*

  func       <- "func" _ args _ ret:ret? _ block
  args       <- "(" _ (arg _ ("," _ arg _)* )? _ ")"
  arg        <- name _ typifier:(":" _ type)?
  ret        <- "->" space type

  chain      <- name tail:(indexer / property / call)* <Chain>
  binary     <- lexpr _ binaryop _ expr <Binary>
  unary      <- unaryoperator expr
  group      <- "(" _ expr _ ")" <Group>

  indexer    <- "[" expr "]"
  property   <- "." name
  call       <- "(" _ args:(head:expr _ tail:("," _ expr _)* )? _ ")" <Call>

  terminator <- _ comment? "\n" allspace <Skip>
  space      <- [ \t]+
  _          <- space?
  allspace   <- [ \n\r\t]* <Skip>

  comment    <- "#" [^\n]* <Comment>

  literal <- integer <Literal>
  integer <- ("0" / ("-"? [1-9] [0-9]*)) <Integer>

  binaryop       <- addeq /
                    add / sub / mul / div / mod / eq / or / lt

  add            <- "+"
  sub            <- "-"
  mul            <- "*"
  div            <- "/"
  mod            <- "%"
  eq             <- "=="
  or             <- "||"
  lt             <- "<"

  addeq          <- "+="

  unaryoperator  <- not
  not            <- "!"
